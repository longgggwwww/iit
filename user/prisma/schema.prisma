generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  password    String
  type        Type         @default(review)
  provider    Provider     @default(local)
  fullName    String?
  birthday    DateTime?
  gender      Gender       @default(other)
  email       String?      @unique
  phone       String?      @unique
  photo       String?
  positionId  Int?
  wardId      Int?
  address     String?
  isActive    Boolean      @default(false)
  roleId      Int
  successorId Int?         @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  groups      Group[]
  permissions Permission[]
  roles       Role[]       @relation("UserToRoles")
  role        Role         @relation("UserToRole", fields: [roleId], references: [id])
  successor   User?        @relation("UserToUser", fields: [successorId], references: [id])
  predecessor User?        @relation("UserToUser")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  code        String       @unique
  successorId Int?         @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdById Int?
  createdBy   User?        @relation("UserToRoles", fields: [createdById], references: [id])
  successor   Role?        @relation("RoleToRole", fields: [successorId], references: [id])
  predecessor Role?        @relation("RoleToRole")
  users       User[]       @relation("UserToRole")
  permissions Permission[] @relation("PermissionsToRoles")
}

model Group {
  id          Int          @id @default(autoincrement())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdById Int?
  createdBy   User?        @relation(fields: [createdById], references: [id])
  permissions Permission[]
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String
  code        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  groupId     Int?
  createdById Int?
  createdBy   User?    @relation(fields: [createdById], references: [id])
  group       Group?   @relation(fields: [groupId], references: [id])
  roles       Role[]   @relation("PermissionsToRoles")
}

enum Gender {
  male
  female
  other
}

enum Type {
  manager
  business
  review
}

enum Provider {
  local
  google
  facebook
  github
}
