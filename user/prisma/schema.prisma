// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  password    String
  type        Type
  provider    Provider
  fullName    String?
  birthday    DateTime?
  gender      Gender
  email       String?      @unique
  phone       String?      @unique
  photo       String?
  positionId  Int?
  wardId      Int?
  address     String?
  isActive    Boolean      @default(false)
  roleId      Int
  successorId Int?         @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  role        Role         @relation(fields: [roleId], references: [id])
  roles       Role[]       @relation("created")
  groups      Group[]
  permissions Permission[]
  successor   User?        @relation("User", fields: [successorId], references: [id])
  predecessor User?        @relation("User")
}

enum Gender {
  MALE
  FEMALE
}

enum Type {
  MANAGER
  BUSINESS
  EXPERIENCE
}

enum Provider {
  LOCAL
  GOOGLE
  FACEBOOK
  GITHUB
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  code        String       @unique
  successorId Int?         @unique
  successor   Role?        @relation("Role", fields: [successorId], references: [id])
  predecessor Role?        @relation("Role")
  permissions Permission[]
  users       User[]
  user        User?        @relation(name: "created", fields: [userId], references: [id])
  userId      Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Group {
  id          Int          @id @default(autoincrement())
  name        String
  userId      Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User?        @relation(fields: [userId], references: [id])
  permissions Permission[]
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  groupId   Int
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  roles     Role[]
}
